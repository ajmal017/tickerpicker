load '../cmdline/codegen.rb'

@testnumber = 1

def run_test(num, rules, expect)

  print "test #{@testnumber}:  "

  p = CodeGenerator::Parser.new(rules)
  p.parse_rules
  result = {:rules => p.table.rules, :symbols => p.table.symboltable}

  unless(result == expect)
    puts "FAILURE:"
    puts "For rules '#{rules}'"
    puts "Expected #{expect} BUT GOT #{result}" 
    puts "TEST #{@testnumber} ON LINE #{num}"
    abort
  else
    puts "OK"
    @testnumber += 1
  end
end

#simple conditions
run_test(__LINE__, "1 > 1;", {:rules=>["$0 > $0"], :symbols=>["1"]})
run_test(__LINE__, "C > 1;", {:rules=>["$0 > $1"], :symbols=>["C", "1"]})
run_test(__LINE__, "C > C;", {:rules=>["$0 > $0"], :symbols=>["C"]})

run_test(__LINE__, "1 < 1;", {:rules=>["$0 < $0"], :symbols=>["1"]})
run_test(__LINE__, "C < 1;", {:rules=>["$0 < $1"], :symbols=>["C", "1"]})
run_test(__LINE__, "C < C;", {:rules=>["$0 < $0"], :symbols=>["C"]})

run_test(__LINE__, "1 >= 1;", {:rules=>["$0 >= $0"], :symbols=>["1"]})
run_test(__LINE__, "C >= 1;", {:rules=>["$0 >= $1"], :symbols=>["C", "1"]})
run_test(__LINE__, "C >= C;", {:rules=>["$0 >= $0"], :symbols=>["C"]})

run_test(__LINE__, "1 <= 1;", {:rules=>["$0 <= $0"], :symbols=>["1"]})
run_test(__LINE__, "C <= 1;", {:rules=>["$0 <= $1"], :symbols=>["C", "1"]})
run_test(__LINE__, "C <= C;", {:rules=>["$0 <= $0"], :symbols=>["C"]})

run_test(__LINE__, "1 != 1;", {:rules=>["$0 != $0"], :symbols=>["1"]})
run_test(__LINE__, "C != 1;", {:rules=>["$0 != $1"], :symbols=>["C", "1"]})
run_test(__LINE__, "C != C;", {:rules=>["$0 != $0"], :symbols=>["C"]})

run_test(__LINE__, "1 = 1;", {:rules=>["$0 = $0"], :symbols=>["1"]})
run_test(__LINE__, "C = 1;", {:rules=>["$0 = $1"], :symbols=>["C", "1"]})
run_test(__LINE__, "C = C;", {:rules=>["$0 = $0"], :symbols=>["C"]})

#simple conditions with an argument to the indicator
run_test(__LINE__, "C1 > 1;", {:rules=>["$1 > $0"], :symbols=>["1", "C $0"]})
run_test(__LINE__, "C1 > C;", {:rules=>["$1 > $2"], :symbols=>["1", "C $0", "C"]})
run_test(__LINE__, "C1 > C1;", {:rules=>["$1 > $1"], :symbols=>["1", "C $0"]})

run_test(__LINE__, "C1 < 1;", {:rules=>["$1 < $0"], :symbols=>["1", "C $0"]})
run_test(__LINE__, "C1 < C;", {:rules=>["$1 < $2"], :symbols=>["1", "C $0", "C"]})
run_test(__LINE__, "C1 < C1;", {:rules=>["$1 < $1"], :symbols=>["1", "C $0"]})

run_test(__LINE__, "C1 >= 1;", {:rules=>["$1 >= $0"], :symbols=>["1", "C $0"]})
run_test(__LINE__, "C1 >= C;", {:rules=>["$1 >= $2"], :symbols=>["1", "C $0", "C"]})
run_test(__LINE__, "C1 >= C1;", {:rules=>["$1 >= $1"], :symbols=>["1", "C $0"]})

run_test(__LINE__, "C1 <= 1;", {:rules=>["$1 <= $0"], :symbols=>["1", "C $0"]})
run_test(__LINE__, "C1 <= C;", {:rules=>["$1 <= $2"], :symbols=>["1", "C $0", "C"]})
run_test(__LINE__, "C1 <= C1;", {:rules=>["$1 <= $1"], :symbols=>["1", "C $0"]})

run_test(__LINE__, "C1 = 1;", {:rules=>["$1 = $0"], :symbols=>["1", "C $0"]})
run_test(__LINE__, "C1 = C;", {:rules=>["$1 = $2"], :symbols=>["1", "C $0", "C"]})
run_test(__LINE__, "C1 = C1;", {:rules=>["$1 = $1"], :symbols=>["1", "C $0"]})

run_test(__LINE__, "C1 != 1;", {:rules=>["$1 != $0"], :symbols=>["1", "C $0"]})
run_test(__LINE__, "C1 != C;", {:rules=>["$1 != $2"], :symbols=>["1", "C $0", "C"]})
run_test(__LINE__, "C1 != C1;", {:rules=>["$1 != $1"], :symbols=>["1", "C $0"]})

#simple conditions with more than one argument to the indicator
run_test(__LINE__, "C1,2 > 1;", {:rules=>["$2 > $0"], :symbols=>["1", "2", "C $0,$1"]})
run_test(__LINE__, "C1,2 > C;", {:rules=>["$2 > $3"], :symbols=>["1", "2", "C $0,$1", "C"]})
run_test(__LINE__, "C1,2 > C1;", {:rules=>["$2 > $3"], :symbols=>["1", "2", "C $0,$1", "C $0"]})

#simple conditions with more than one argument to both indicators
run_test(__LINE__, "C1,2 > C1,2;", {:rules=>["$2 > $2"], :symbols=>["1", "2", "C $0,$1"]})
run_test(__LINE__, "C1,1 > C2,2;", {:rules=>["$1 > $3"], :symbols=>["1", "C $0,$0", "2", "C $2,$2"]})
run_test(__LINE__, "C1,2 > C3,4;", {:rules=>["$2 > $5"], :symbols=>["1", "2", "C $0,$1", "3", "4", "C $3,$4"]})

#simple conditions with more than one argument to the indicator
#and a parenthesized argument list
run_test(__LINE__, "C(1,2) > 1;", {:rules=>["$2 > $0"], :symbols=>["1", "2", "C $0,$1"]})
run_test(__LINE__, "C(1,2) > C;", {:rules=>["$2 > $3"], :symbols=>["1", "2", "C $0,$1", "C"]})
run_test(__LINE__, "C(1,2) > C(1);", {:rules=>["$2 > $3"], :symbols=>["1", "2", "C $0,$1", "C $0"]})

#simple conditions with more than one argument to both indicators
#and a parenthesized argument list
run_test(__LINE__, "C(1,2) > C(1,2);", {:rules=>["$2 > $2"], :symbols=>["1", "2", "C $0,$1"]})
run_test(__LINE__, "C(1,1) > C(2,2);", {:rules=>["$1 > $3"], :symbols=>["1", "C $0,$0", "2", "C $2,$2"]})
run_test(__LINE__, "C(1,2) > C(3,4);", {:rules=>["$2 > $5"], :symbols=>["1", "2", "C $0,$1", "3", "4", "C $3,$4"]})
run_test(__LINE__, "C((1),(2),(3)) > 1;", {:rules=>["$3 > $0"], :symbols=>["1", "2", "3", "C $0,$1,$2"]})
run_test(__LINE__, "C((1),(2),(3)) > C((1),(2),(3));", {:rules=>["$3 > $3"], :symbols=>["1", "2", "3", "C $0,$1,$2"]})

#nested indicators
run_test(__LINE__, "ABS(C) > 1;", {:rules=>["$1 > $2"], :symbols=>["C", "ABS $0", "1"]})
run_test(__LINE__, "ABS(C) > ABS(C1);", {:rules=>["$1 > $4"], :symbols=>["C", "ABS $0", "1", "C $2", "ABS $3"]})
run_test(__LINE__, "ABS(C) > ABS(C(1));", {:rules=>["$1 > $4"], :symbols=>["C", "ABS $0", "1", "C $2", "ABS $3"]})
run_test(__LINE__, "ABS(ABS(ABS(C(1,1)))) > 0;", {:rules=>["$4 > $5"], :symbols=>["1", "C $0,$0", "ABS $1", "ABS $2", "ABS $3", "0"]})
run_test(__LINE__, "ABS(ABS(ABS(C((1),1)))) > 0;", {:rules=>["$4 > $5"], :symbols=>["1", "C $0,$0", "ABS $1", "ABS $2", "ABS $3", "0"]})
run_test(__LINE__, "ABS(ABS(ABS(C((1),(1))))) > 0;", {:rules=>["$4 > $5"], :symbols=>["1", "C $0,$0", "ABS $1", "ABS $2", "ABS $3", "0"]})

#basic expressions
run_test(__LINE__, "1+1 = 1+1;", {:rules=>["$1 = $1"], :symbols=>["1", "$0 + $0"]})
run_test(__LINE__, "1+1 = 2+2;", {:rules=>["$1 = $3"], :symbols=>["1", "$0 + $0", "2", "$2 + $2"]})
run_test(__LINE__, "1+1+1 = 1+1;", {:rules=>["$2 = $1"], :symbols=>["1", "$0 + $0", "$0 + $1"]})
run_test(__LINE__, "1+1+1 = 2+2+2;", {:rules=>["$2 = $5"], :symbols=>["1", "$0 + $0", "$0 + $1", "2", "$3 + $3", "$3 + $4"]})

run_test(__LINE__, "1-1 = 1+1;", {:rules=>["$1 = $2"], :symbols=>["1", "$0 - $0", "$0 + $0"]})
run_test(__LINE__, "1-1 = 2+2;", {:rules=>["$1 = $3"], :symbols=>["1", "$0 - $0", "2", "$2 + $2"]})
run_test(__LINE__, "1-1+1 = 1+1;", {:rules=>["$2 = $1"], :symbols=>["1", "$0 + $0", "$0 - $1"]})
run_test(__LINE__, "1-1+1 = 2+2+2;", {:rules=>["$2 = $5"], :symbols=>["1", "$0 + $0", "$0 - $1", "2", "$3 + $3", "$3 + $4"]})

run_test(__LINE__, "C + 1 = 1;", {:rules=>["$2 = $1"], :symbols=>["C", "1", "$0 + $1"]})
run_test(__LINE__, "C + 1 = C;", {:rules=>["$2 = $0"], :symbols=>["C", "1", "$0 + $1"]})
run_test(__LINE__, "C + 1 = C + 1;", {:rules=>["$2 = $2"], :symbols=>["C", "1", "$0 + $1"]})
run_test(__LINE__, "C + 1 = C - 1;", {:rules=>["$2 = $3"], :symbols=>["C", "1", "$0 + $1", "$0 - $1"]})

run_test(__LINE__, "(1)+(1) = (1)+(1);", {:rules=>["$1 = $1"], :symbols=>["1", "$0 + $0"]})
run_test(__LINE__, "C1 + 1 = 1;", {:rules=>["$2 = $0"], :symbols=>["1", "C $0", "$1 + $0"]})
run_test(__LINE__, "C1 + 1 = C;", {:rules=>["$2 = $3"], :symbols=>["1", "C $0", "$1 + $0", "C"]})
run_test(__LINE__, "C1 + 1 = C + 1;", {:rules=>["$2 = $4"], :symbols=>["1", "C $0", "$1 + $0", "C", "$3 + $0"]})
run_test(__LINE__, "C1 + 1 = C - 1;", {:rules=>["$2 = $4"], :symbols=>["1", "C $0", "$1 + $0", "C", "$3 - $0"]})

run_test(__LINE__, "C1 + 1 + 1 = 1;", {:rules=>["$3 = $0"], :symbols=>["1", "C $0", "$0 + $0", "$1 + $2"]})
run_test(__LINE__, "C1 + 2 + 3 = 4;", {:rules=>["$5 = $6"], :symbols=>["1", "C $0", "2", "3", "$2 + $3", "$1 + $4", "4"]})

#ternary operator
run_test(__LINE__, "{0 > 1 ? 0 : 1} = 1;", {:rules=>["$3 = $1"], :symbols=>["0", "1", "$0 > $1", "$2 $0 $1"]})
run_test(__LINE__, "{0 > 1 ? 2 : 3} = 4;", {:rules=>["$5 = $6"], :symbols=>["0", "1", "$0 > $1", "2", "3", "$2 $3 $4", "4"]})
run_test(__LINE__, "{0 > 1 ? 0 : 1} = {0 < 1 ? 1 : 0};", {:rules=>["$3 = $5"], :symbols=>["0", "1", "$0 > $1", "$2 $0 $1", "$0 < $1", "$4 $1 $0"]})
run_test(__LINE__, "{1 = 1 ? 0 : {1 != 1 ? 2 : 3}} > 0;", {:rules=>["$7 > $2"], :symbols=>["1", "$0 = $0", "0", "$0 != $0", "2", "3", "$3 $4 $5", "$1 $2 $6"]})
run_test(__LINE__, "{1 = 1 ? 0 : {1 != 1 ? 2 : 3}} = {1 = 1 ? 0 : {1 != 1 ? 2 : 3}};", {:rules=>["$7 = $7"], :symbols=>["1", "$0 = $0", "0", "$0 != $0", "2", "3", "$3 $4 $5", "$1 $2 $6"]})
run_test(__LINE__, "{1 = 1 ? {2 = 2 ? 0 : 1} : {3 = 3 ? 0 : 1}} = 1;", {:rules=>["$9 = $0"], :symbols=>["1", "$0 = $0", "2", "$2 = $2", "0", "$3 $4 $0", "3", "$6 = $6", "$7 $4 $0", "$1 $5 $8"]})
run_test(__LINE__, "{0 > 1 ? 2 : 3} = {0 > 1 ? 2 : 3};", {:rules=>["$5 = $5"], :symbols=>["0", "1", "$0 > $1", "2", "3", "$2 $3 $4"]})
run_test(__LINE__, "{0 > 1 ? 2 : 3} + 4 > 6;", {:rules=>["$7 > $8"], :symbols=>["0", "1", "$0 > $1", "2", "3", "$2 $3 $4", "4", "$5 + $6", "6"]})

#indicators and ternary operator
run_test(__LINE__, "C({0 > 1 ? 0 : 1}) > 0;", {:rules=>["$4 > $0"], :symbols=>["0", "1", "$0 > $1", "$2 $0 $1", "C $3"]})
run_test(__LINE__, "C(5,{0 > 1 ? 0 : 1}) > 0;", {:rules=>["$5 > $1"], :symbols=>["5", "0", "1", "$1 > $2", "$3 $1 $2", "C $0,$4"]})
run_test(__LINE__, "C({0 > 1 ? 0 : 1},{1 > 2 ? 1 : 2}) > 1;", {:rules=>["$7 > $1"], :symbols=>["0", "1", "$0 > $1", "$2 $0 $1", "2", "$1 > $4", "$5 $1 $4", "C $3,$6"]})
run_test(__LINE__, "C({0 > 1 ? 2 : 3},{0 > 1 ? 2 : 3}) > 5;", {:rules=>["$6 > $7"], :symbols=>["0", "1", "$0 > $1", "2", "3", "$2 $3 $4", "C $5,$5", "5"]})
run_test(__LINE__, "C({0 > 1 ? 2 : {3 > 4 ? 5 : 6}}) > 0;", {:rules=>["$11 > $0"], :symbols=>["0", "1", "$0 > $1", "2", "3", "4", "$4 > $5", "5", "6", "$6 $7 $8", "$2 $3 $9", "C $10"]})
run_test(__LINE__, "C({0 > 1 ? 2 : 3},5,C3) > 5;", {:rules=>["$8 > $6"], :symbols=>["0", "1", "$0 > $1", "2", "3", "$2 $3 $4", "5", "C $4", "C $5,$6,$7"]})

#associativity
run_test(__LINE__, "1+1+1+1>1;", {:rules=>["$3 > $0"], :symbols=>["1", "$0 + $0", "$0 + $1", "$0 + $2"]})
run_test(__LINE__, "1*1*1*1>1;", {:rules=>["$3 > $0"], :symbols=>["1", "$0 * $0", "$0 * $1", "$0 * $2"]})

run_test(__LINE__, "(1+(1+(1+1))) > 1;", {:rules=>["$3 > $0"], :symbols=>["1", "$0 + $0", "$0 + $1", "$0 + $2"]})
run_test(__LINE__, "(1*(1*(1*1))) > 1;", {:rules=>["$3 > $0"], :symbols=>["1", "$0 * $0", "$0 * $1", "$0 * $2"]})

run_test(__LINE__, "(((1+1)+1)+1) > 1;", {:rules=>["$3 > $0"], :symbols=>["1", "$0 + $0", "$1 + $0", "$2 + $0"]})
run_test(__LINE__, "(((1*1)*1)*1) > 1;", {:rules=>["$3 > $0"], :symbols=>["1", "$0 * $0", "$1 * $0", "$2 * $0"]})

run_test(__LINE__, "1+2+3 > 4;", {:rules=>["$4 > $5"], :symbols=>["1", "2", "3", "$1 + $2", "$0 + $3", "4"]})
run_test(__LINE__, "1*2*3 > 4;", {:rules=>["$4 > $5"], :symbols=>["1", "2", "3", "$1 * $2", "$0 * $3", "4"]})

run_test(__LINE__, "(1+(2+3)) > 4;", {:rules=>["$4 > $5"], :symbols=>["1", "2", "3", "$1 + $2", "$0 + $3", "4"]})
run_test(__LINE__, "(1*(2*3)) > 4;", {:rules=>["$4 > $5"], :symbols=>["1", "2", "3", "$1 * $2", "$0 * $3", "4"]})

run_test(__LINE__, "((1+2)+3) > 4;", {:rules=>["$4 > $5"], :symbols=>["1", "2", "$0 + $1", "3", "$2 + $3", "4"]})
run_test(__LINE__, "((1*2)*3) > 4;", {:rules=>["$4 > $5"], :symbols=>["1", "2", "$0 * $1", "3", "$2 * $3", "4"]})

#underscore separators
run_test(__LINE__, "100000 = 100_000;", {:rules=>["$0 = $0"], :symbols=>["100000"]})
run_test(__LINE__, "100000 = 100_00_00;", {:rules=>["$0 = $1"], :symbols=>["100000", "1000000"]}) 
run_test(__LINE__, "-1000 = -1_0_00;", {:rules=>["$0 = $0"], :symbols=>["-1000"]})
run_test(__LINE__, "1000 = 1_0_0_0;", {:rules=>["$0 = $0"], :symbols=>["1000"]})
run_test(__LINE__, "100_0 = 1_000;", {:rules=>["$0 = $0"], :symbols=>["1000"]})

#floating point numbers
run_test(__LINE__, "1.0 > 1;", {:rules=>["$0 > $1"], :symbols=>["1.0", "1"]})
run_test(__LINE__, "1.0 > 2.0;", {:rules=>["$0 > $1"], :symbols=>["1.0", "2.0"]})
run_test(__LINE__, ".1 > 1;", {:rules=>["$0 > $1"], :symbols=>[".1", "1"]})
run_test(__LINE__, ".1 > .2;", {:rules=>["$0 > $1"], :symbols=>[".1", ".2"]})
run_test(__LINE__, "1 + .1 > 1;", {:rules=>["$2 > $0"], :symbols=>["1", ".1", "$0 + $1"]})
run_test(__LINE__, "1 + 0.1 > 1;", {:rules=>["$2 > $0"], :symbols=>["1", "0.1", "$0 + $1"]})
run_test(__LINE__, "1.0 + .1 > 1;", {:rules=>["$2 > $3"], :symbols=>["1.0", ".1", "$0 + $1", "1"]})
run_test(__LINE__, "1.0 + 0.1 > 1;", {:rules=>["$2 > $3"], :symbols=>["1.0", "0.1", "$0 + $1", "1"]})

#test AND/OR/XOR
run_test(__LINE__, "C > 1 OR C < 0;", {:rules=>["$2 OR $4"], :symbols=>["C", "1", "$0 > $1", "0", "$0 < $3"]})
run_test(__LINE__, "C > 1 XOR C < 0;", {:rules=>["$2 XOR $4"], :symbols=>["C", "1", "$0 > $1", "0", "$0 < $3"]})
run_test(__LINE__, "C > 1 AND C < 0;", {:rules=>["$2 AND $4"], :symbols=>["C", "1", "$0 > $1", "0", "$0 < $3"]})
run_test(__LINE__, "C > 1 OR C > 2 OR C > 3 OR C > 5;", {:rules=>["$2 OR $10"], :symbols=>["C", "1", "$0 > $1", "2", "$0 > $3", "3", "$0 > $5", "5", "$0 > $7", "$6 OR $8", "$4 OR $9"]})
run_test(__LINE__, "C > 1 XOR C > 2 XOR C > 3 XOR C > 5;", {:rules=>["$2 XOR $10"], :symbols=>["C", "1", "$0 > $1", "2", "$0 > $3", "3", "$0 > $5", "5", "$0 > $7", "$6 XOR $8", "$4 XOR $9"]})
run_test(__LINE__, "C > 1 AND C > 2 AND C > 3 AND C > 5;", {:rules=>["$2 AND $10"], :symbols=>["C", "1", "$0 > $1", "2", "$0 > $3", "3", "$0 > $5", "5", "$0 > $7", "$6 AND $8", "$4 AND $9"]})

#compound AND/OR/XOR
run_test(__LINE__, "C20 >= 5 AND (AVGC20 * AVGV20) >= 250000 AND 100 * (C - C20) / C20 >= 5;", {:rules=>["$3 AND $15"], :symbols=>["20", "C $0", "5", "$1 >= $2", "AVGC $0", "AVGV $0", "$4 * $5", "250000", "$6 >= $7", "100", "C", "$10 - $1", "$11 / $1", "$9 * $12", "$13 >= $2", "$8 AND $14"]})
run_test(__LINE__, "( 100 * (C - C1) / C1) >= 20 AND V > 10000 AND C >= 5;", {:rules=>["$8 AND $14"], :symbols=>["100", "C", "1", "C $2", "$1 - $3", "$4 / $3", "$0 * $5", "20", "$6 >= $7", "V", "10000", "$9 > $10", "5", "$1 >= $12", "$11 AND $13"]})
run_test(__LINE__, "(100 * (C - C1) / C1) >= 4 AND V >= 1000 AND V > V1;", {:rules=>["$8 AND $14"], :symbols=>["100", "C", "1", "C $2", "$1 - $3", "$4 / $3", "$0 * $5", "4", "$6 >= $7", "V", "1000", "$9 >= $10", "V $2", "$9 > $12", "$11 AND $13"]})
run_test(__LINE__, "(C - C1) >= 5 AND V > 10000 AND C >= 5;", {:rules=>["$5 AND $10"], :symbols=>["C", "1", "C $1", "$0 - $2", "5", "$3 >= $4", "V", "10000", "$6 > $7", "$0 >= $4", "$8 AND $9"]})
run_test(__LINE__, "C > C1 AND V > 5 * AVGV50.1 AND V > 3000 AND C > 5;", {:rules=>["$3 AND $14"], :symbols=>["C", "1", "C $1", "$0 > $2", "V", "5", "50.1", "AVGV $6", "$5 * $7", "$4 > $8", "3000", "$4 > $10", "$0 > $5", "$11 AND $12", "$9 AND $13"]})

#negative numbers and clists
run_test(__LINE__, "-1 > -2;", {:rules=>["$0 > $1"], :symbols=>["-1", "-2"]})
run_test(__LINE__, "C - 1 = 1;", {:rules=>["$2 = $1"], :symbols=>["C", "1", "$0 - $1"]})
run_test(__LINE__, "C - -1 = 1;", {:rules=>["$2 = $3"], :symbols=>["C", "-1", "$0 - $1", "1"]})
run_test(__LINE__, "C - (-1) = 1;", {:rules=>["$2 = $3"], :symbols=>["C", "-1", "$0 - $1", "1"]})
run_test(__LINE__, "C(1,2,-1) > 1;", {:rules=>["$3 > $0"], :symbols=>["1", "2", "-1", "C $0,$1,$2"]})
run_test(__LINE__, "C(-1) = C(-1);", {:rules=>["$1 = $1"], :symbols=>["-1", "C $0"]})
run_test(__LINE__, "C(-1) = C - 1;", {:rules=>["$1 = $4"], :symbols=>["-1", "C $0", "C", "1", "$2 - $3"]})
run_test(__LINE__, "( 100 * (C - C1) / C1) <= ( - 20) AND V > 10000 AND C >= 5;", {:rules=>["$8 AND $14"], :symbols=>["100", "C", "1", "C $2", "$1 - $3", "$4 / $3", "$0 * $5", "-20", "$6 <= $7", "V", "10000", "$9 > $10", "5", "$1 >= $12", "$11 AND $13"]})
run_test(__LINE__, "( 100 * (C - C1) / C1) <= ( - 30) AND V > 3000 AND C >= 5;", {:rules=>["$8 AND $14"], :symbols=>["100", "C", "1", "C $2", "$1 - $3", "$4 / $3", "$0 * $5", "-30", "$6 <= $7", "V", "3000", "$9 > $10", "5", "$1 >= $12", "$11 AND $13"]})
run_test(__LINE__, "(C - C1) <= ( - 5) AND V > 10000 AND C >= 5;", {:rules=>["$5 AND $11"], :symbols=>["C", "1", "C $1", "$0 - $2", "-5", "$3 <= $4", "V", "10000", "$6 > $7", "5", "$0 >= $9", "$8 AND $10"]})
run_test(__LINE__, "( 100 * (C - C1) / C1) <= ( - 10) AND V > 1000 AND C >= 5;", {:rules=>["$8 AND $14"], :symbols=>["100", "C", "1", "C $2", "$1 - $3", "$4 / $3", "$0 * $5", "-10", "$6 <= $7", "V", "1000", "$9 > $10", "5", "$1 >= $12", "$11 AND $13"]})

#some general tests
run_test(__LINE__, "BOLLINGER_UPPER20,2 > BOLLINGER_LOWER20,2;", {:rules=>["$2 > $3"], :symbols=>["20", "2", "BOLLINGER_UPPER $0,$1", "BOLLINGER_LOWER $0,$1"]})
run_test(__LINE__, "(100 * ((C - C250) / C250)) >= 300;", {:rules=>["$6 >= $7"], :symbols=>["100", "C", "250", "C $2", "$1 - $3", "$4 / $3", "$0 * $5", "300"]})
run_test(__LINE__, "(100 * ((MAXC250 - MINC250) / MINC250)) >= 400;", {:rules=>["$6 >= $7"], :symbols=>["100", "250", "MAXC $1", "MINC $1", "$2 - $3", "$4 / $3", "$0 * $5", "400"]})
run_test(__LINE__, "(100 * ((C + .01) - (MAXC34 + .01)) / (MAXC34 + .01)) > 1;", {:rules=>["$9 > $10"], :symbols=>["100", "C", ".01", "$1 + $2", "34", "MAXC $4", "$5 + $2", "$3 - $6", "$7 / $6", "$0 * $8", "1"]})
run_test(__LINE__, "(((C - MINC260) / MINC260) * 100) > 100;", {:rules=>["$6 > $5"], :symbols=>["C", "260", "MINC $1", "$0 - $2", "$3 / $2", "100", "$4 * $5"]})
run_test(__LINE__, "DAYCHANGE >= 10;", {:rules=>["$0 >= $1"], :symbols=>["DAYCHANGE", "10"]})
run_test(__LINE__, "((ATR20 / AVGC20) * 100) <= 2;", {:rules=>["$5 <= $6"], :symbols=>["20", "ATR $0", "AVGC $0", "$1 / $2", "100", "$3 * $4", "2"]})
run_test(__LINE__, "(ATR20 / AVGC20) * 100 <= 2;", {:rules=>["$5 <= $6"], :symbols=>["20", "ATR $0", "AVGC $0", "$1 / $2", "100", "$3 * $4", "2"]})
run_test(__LINE__, "100 * ((C + .01) - ( MINC65 + .01)) / (MINC65 + .01) >= 25 AND AVGC20 * AVGV20 >= 2500;", {:rules=>["$11 AND $17"], :symbols=>["100", "C", ".01", "$1 + $2", "65", "MINC $4", "$5 + $2", "$3 - $6", "$7 / $6", "$0 * $8", "25", "$9 >= $10", "20", "AVGC $12", "AVGV $12", "$13 * $14", "2500", "$15 >= $16"]})
run_test(__LINE__, "C<=.6*MAXH252 and DAYS_AGO(1,MINV3) >= 30000;", {:rules=>["$5 AND $11"], :symbols=>["C", ".6", "252", "MAXH $2", "$1 * $3", "$0 <= $4", "1", "3", "MINV $7", "DAYS_AGO $6,$8", "30000", "$9 >= $10"]})
run_test(__LINE__, "(C - C60) / (ABS(C - C1) + 0.001) > 0.3;", {:rules=>["$10 > $11"], :symbols=>["C", "60", "C $1", "$0 - $2", "1", "C $4", "$0 - $5", "ABS $6", "0.001", "$7 + $8", "$3 / $9", "0.3"]}) 
run_test(__LINE__, "(DAYS_AGO(1, EMAC20) - DAYS_AGO(1, EMAC40)) < 0 AND (EMAC20-EMAC40) > 0;", {:rules=>["$9 AND $11"], :symbols=>["1", "20", "EMAC $1", "DAYS_AGO $0,$2", "40", "EMAC $4", "DAYS_AGO $0,$5", "$3 - $6", "0", "$7 < $8", "$2 - $5", "$10 > $8"]})

run_test(__LINE__, "(EMAC20-EMAC40) > (DAYS_AGO(1, EMAC20) - DAYS_AGO(1, EMAC40)) AND DAYS_AGO(1, EMAC20) - DAYS_AGO(1, EMAC40) > DAYS_AGO(2, EMAC20) - DAYS_AGO(2, EMAC40) AND  DAYS_AGO(2, EMAC20) - DAYS_AGO(2, EMAC40) > DAYS_AGO(3, EMAC20) - DAYS_AGO(3, EMAC40);", {:rules=>["$9 AND $20"], :symbols=>["20", "EMAC $0", "40", "EMAC $2", "$1 - $3", "1", "DAYS_AGO $5,$1", "DAYS_AGO $5,$3", "$6 - $7", "$4 > $8", "2", "DAYS_AGO $10,$1", "DAYS_AGO $10,$3", "$11 - $12", "$8 > $13", "3", "DAYS_AGO $15,$1", "DAYS_AGO $15,$3", "$16 - $17", "$13 > $18", "$14 AND $19"]}) 

run_test(__LINE__, "L4 < C1 AND C1 < C2 AND C2 < C3 AND C3 < H4 AND O4 < C4 AND C4 < C AND O < C AND ABS(C3 - O3) <= (C4 - O4) * .75 AND ABS(C2 - O2) <= C4 - O4 * .75 AND H - L > AVGH21 - AVGL21 AND H4 - L4 > DAYS_AGO(4, AVGH21) - DAYS_AGO(4, AVGL21);", {:rules=>["$4 AND $54"], :symbols=>["4", "L $0", "1", "C $2", "$1 < $3", "2", "C $5", "$3 < $6", "3", "C $8", "$6 < $9", "H $0", "$9 < $11", "O $0", "C $0", "$13 < $14", "C", "$14 < $16", "O", "$18 < $16", "O $8", "$9 - $20", "ABS $21", "$14 - $13", ".75", "$23 * $24", "$22 <= $25", "O $5", "$6 - $27", "ABS $28", "$13 * $24", "$14 - $30", "$29 <= $31", "H", "L", "$33 - $34", "21", "AVGH $36", "AVGL $36", "$37 - $38", "$35 > $39", "$11 - $1", "DAYS_AGO $0,$37", "DAYS_AGO $0,$38", "$42 - $43", "$41 > $44", "$40 AND $45", "$32 AND $46", "$26 AND $47", "$19 AND $48", "$17 AND $49", "$15 AND $50", "$12 AND $51", "$10 AND $52", "$7 AND $53"]}) 

run_test(__LINE__, "(C - C60) / (ABS(C - C1) + ABS(C1 - C2) + ABS(C2 - C3) + ABS(C3 - C4) + ABS(C4 - C5) + ABS(C5 - C6) + ABS(C6 - C7) + ABS(C7 - C8) + ABS(C8 - C9) + ABS(C9 - C10) + ABS(C10 - C11) + ABS(C11 - C12) + ABS(C12 - C13) + ABS(C13 - C14) + ABS(C14 - C15) + ABS(C15 - C16) + ABS(C16 - C17) + ABS(C17 - C18) + ABS(C18 - C19) + ABS(C19 - C20) + ABS(C20 - C21) + ABS(C21 - C22) + ABS(C22 - C23) + ABS(C23 - C24) + ABS(C24 - C25) + ABS(C25 - C26) + ABS(C26 - C27) + ABS(C27 - C28) + ABS(C28 - C29) + ABS(C29 - C30) + ABS(C30 - C31) + ABS(C31 - C32) + ABS(C32 - C33) + ABS(C33 - C34) + ABS(C34 - C35) + ABS(C35 - C36) + ABS(C36 - C37) + ABS(C37 - C38) + ABS(C38 - C39) + ABS(C39 - C40) + ABS(C40 - C41) + ABS(C41 - C42) + ABS(C42 - C43) + ABS(C43 - C44) + ABS(C44 - C45) + ABS(C45 - C46) + ABS(C46 - C47) + ABS(C47 - C48) + ABS(C48 - C49) + ABS(C49 - C50) + ABS(C50 - C51) + ABS(C51 - C52) + ABS(C52 - C53) + ABS(C53 - C54) + ABS(C54 - C55) + ABS(C55 - C56) + ABS(C56 - C57) + ABS(C57 - C58) + ABS(C58 - C59) + ABS(C59 - C60) + 0.001) > 0;", {:rules=>["$303 > $304"], :symbols=>["C", "60", "C $1", "$0 - $2", "1", "C $4", "$0 - $5", "ABS $6", "2", "C $8", "$5 - $9", "ABS $10", "3", "C $12", "$9 - $13", "ABS $14", "4", "C $16", "$13 - $17", "ABS $18", "5", "C $20", "$17 - $21", "ABS $22", "6", "C $24", "$21 - $25", "ABS $26", "7", "C $28", "$25 - $29", "ABS $30", "8", "C $32", "$29 - $33", "ABS $34", "9", "C $36", "$33 - $37", "ABS $38", "10", "C $40", "$37 - $41", "ABS $42", "11", "C $44", "$41 - $45", "ABS $46", "12", "C $48", "$45 - $49", "ABS $50", "13", "C $52", "$49 - $53", "ABS $54", "14", "C $56", "$53 - $57", "ABS $58", "15", "C $60", "$57 - $61", "ABS $62", "16", "C $64", "$61 - $65", "ABS $66", "17", "C $68", "$65 - $69", "ABS $70", "18", "C $72", "$69 - $73", "ABS $74", "19", "C $76", "$73 - $77", "ABS $78", "20", "C $80", "$77 - $81", "ABS $82", "21", "C $84", "$81 - $85", "ABS $86", "22", "C $88", "$85 - $89", "ABS $90", "23", "C $92", "$89 - $93", "ABS $94", "24", "C $96", "$93 - $97", "ABS $98", "25", "C $100", "$97 - $101", "ABS $102", "26", "C $104", "$101 - $105", "ABS $106", "27", "C $108", "$105 - $109", "ABS $110", "28", "C $112", "$109 - $113", "ABS $114", "29", "C $116", "$113 - $117", "ABS $118", "30", "C $120", "$117 - $121", "ABS $122", "31", "C $124", "$121 - $125", "ABS $126", "32", "C $128", "$125 - $129", "ABS $130", "33", "C $132", "$129 - $133", "ABS $134", "34", "C $136", "$133 - $137", "ABS $138", "35", "C $140", "$137 - $141", "ABS $142", "36", "C $144", "$141 - $145", "ABS $146", "37", "C $148", "$145 - $149", "ABS $150", "38", "C $152", "$149 - $153", "ABS $154", "39", "C $156", "$153 - $157", "ABS $158", "40", "C $160", "$157 - $161", "ABS $162", "41", "C $164", "$161 - $165", "ABS $166", "42", "C $168", "$165 - $169", "ABS $170", "43", "C $172", "$169 - $173", "ABS $174", "44", "C $176", "$173 - $177", "ABS $178", "45", "C $180", "$177 - $181", "ABS $182", "46", "C $184", "$181 - $185", "ABS $186", "47", "C $188", "$185 - $189", "ABS $190", "48", "C $192", "$189 - $193", "ABS $194", "49", "C $196", "$193 - $197", "ABS $198", "50", "C $200", "$197 - $201", "ABS $202", "51", "C $204", "$201 - $205", "ABS $206", "52", "C $208", "$205 - $209", "ABS $210", "53", "C $212", "$209 - $213", "ABS $214", "54", "C $216", "$213 - $217", "ABS $218", "55", "C $220", "$217 - $221", "ABS $222", "56", "C $224", "$221 - $225", "ABS $226", "57", "C $228", "$225 - $229", "ABS $230", "58", "C $232", "$229 - $233", "ABS $234", "59", "C $236", "$233 - $237", "ABS $238", "$237 - $2", "ABS $240", "0.001", "$241 + $242", "$239 + $243", "$235 + $244", "$231 + $245", "$227 + $246", "$223 + $247", "$219 + $248", "$215 + $249", "$211 + $250", "$207 + $251", "$203 + $252", "$199 + $253", "$195 + $254", "$191 + $255", "$187 + $256", "$183 + $257", "$179 + $258", "$175 + $259", "$171 + $260", "$167 + $261", "$163 + $262", "$159 + $263", "$155 + $264", "$151 + $265", "$147 + $266", "$143 + $267", "$139 + $268", "$135 + $269", "$131 + $270", "$127 + $271", "$123 + $272", "$119 + $273", "$115 + $274", "$111 + $275", "$107 + $276", "$103 + $277", "$99 + $278", "$95 + $279", "$91 + $280", "$87 + $281", "$83 + $282", "$79 + $283", "$75 + $284", "$71 + $285", "$67 + $286", "$63 + $287", "$59 + $288", "$55 + $289", "$51 + $290", "$47 + $291", "$43 + $292", "$39 + $293", "$35 + $294", "$31 + $295", "$27 + $296", "$23 + $297", "$19 + $298", "$15 + $299", "$11 + $300", "$7 + $301", "$3 / $302", "0"]}) 

#various candlestick scans
run_test(__LINE__, "O1>C1 AND (C-O) >= .7 * (H-L) AND C > O1 AND O < C1 AND (H-L) >= 1.2*(AVGH10-AVGL10);", {:rules=>["$3 AND $24"], :symbols=>["1", "O $0", "C $0", "$1 > $2", "C", "O", "$4 - $5", ".7", "H", "L", "$8 - $9", "$7 * $10", "$6 >= $11", "$4 > $1", "$5 < $2", "1.2", "10", "AVGH $16", "AVGL $16", "$17 - $18", "$15 * $19", "$10 >= $20", "$14 AND $21", "$13 AND $22", "$12 AND $23"]}) 
run_test(__LINE__, "O3 = H3 AND C3 = L3 AND O2 = H2 AND C2 = L2 AND C1 < O1 AND O1 < C2 AND H1 > C2 AND O = H AND C = L AND H > H1 AND L < L1;", {:rules=>["$3 AND $38"], :symbols=>["3", "O $0", "H $0", "$1 = $2", "C $0", "L $0", "$4 = $5", "2", "O $7", "H $7", "$8 = $9", "C $7", "L $7", "$11 = $12", "1", "C $14", "O $14", "$15 < $16", "$16 < $11", "H $14", "$19 > $11", "O", "H", "$21 = $22", "C", "L", "$24 = $25", "$22 > $19", "L $14", "$25 < $28", "$27 AND $29", "$26 AND $30", "$23 AND $31", "$20 AND $32", "$18 AND $33", "$17 AND $34", "$13 AND $35", "$10 AND $36", "$6 AND $37"]})  
run_test(__LINE__, "(O2-C2)>=.7*(H2-L2) AND (H2-L2) >= (DAYS_AGO(2, AVGH10) - DAYS_AGO(2, AVGL10)) AND H1<L2 AND ABS(C1-O1)<=.05*(H1-L1) AND (H-L) >= (AVGH10-AVGL10) AND (C-O) >= .7 * (H-L) AND L>H1;", {:rules=>["$9 AND $44"], :symbols=>["2", "O $0", "C $0", "$1 - $2", ".7", "H $0", "L $0", "$5 - $6", "$4 * $7", "$3 >= $8", "10", "AVGH $10", "DAYS_AGO $0,$11", "AVGL $10", "DAYS_AGO $0,$13", "$12 - $14", "$7 >= $15", "1", "H $17", "$18 < $6", "C $17", "O $17", "$20 - $21", "ABS $22", ".05", "L $17", "$18 - $25", "$24 * $26", "$23 <= $27", "H", "L", "$29 - $30", "$11 - $13", "$31 >= $32", "C", "O", "$34 - $35", "$4 * $31", "$36 >= $37", "$30 > $18", "$38 AND $39", "$33 AND $40", "$28 AND $41", "$19 AND $42", "$16 AND $43"]}) 
run_test(__LINE__, "ABS(C4 - O4) > .5 * (H4 - L4) AND C4 < O4 AND ABS(C3 - O3) < ABS(C4 - O4) AND ABS(C2 - O2) < ABS(C4 - O4) AND ABS(C1 - O1) < ABS(C4 - O4) AND L3 >= L4 AND H3 <= H4 AND L2 >= L4 AND H2 <= H4 AND L1 >= L4 AND H1 <= H4 AND H2 > H3 AND H1 > H2 AND C < O AND C < C4;", {:rules=>["$10 AND $60"], :symbols=>["4", "C $0", "O $0", "$1 - $2", "ABS $3", ".5", "H $0", "L $0", "$6 - $7", "$5 * $8", "$4 > $9", "$1 < $2", "3", "C $12", "O $12", "$13 - $14", "ABS $15", "$16 < $4", "2", "C $18", "O $18", "$19 - $20", "ABS $21", "$22 < $4", "1", "C $24", "O $24", "$25 - $26", "ABS $27", "$28 < $4", "L $12", "$30 >= $7", "H $12", "$32 <= $6", "L $18", "$34 >= $7", "H $18", "$36 <= $6", "L $24", "$38 >= $7", "H $24", "$40 <= $6", "$36 > $32", "$40 > $36", "C", "O", "$44 < $45", "$44 < $1", "$46 AND $47", "$43 AND $48", "$42 AND $49", "$41 AND $50", "$39 AND $51", "$37 AND $52", "$35 AND $53", "$33 AND $54", "$31 AND $55", "$29 AND $56", "$23 AND $57", "$17 AND $58", "$11 AND $59"]})
run_test(__LINE__, "C2 < O2 AND H1 < L2 AND C1 > O1 AND ABS(C1 - O1) > .95 * ABS(C - O) AND ABS(C1 - O1) < 1.95 * ABS(C - O) AND C > O AND C = C1;", {:rules=>["$3 AND $29"], :symbols=>["2", "C $0", "O $0", "$1 < $2", "1", "H $4", "L $0", "$5 < $6", "C $4", "O $4", "$8 > $9", "$8 - $9", "ABS $11", ".95", "C", "O", "$14 - $15", "ABS $16", "$13 * $17", "$12 > $18", "1.95", "$20 * $17", "$12 < $21", "$14 > $15", "$14 = $8", "$23 AND $24", "$22 AND $25", "$19 AND $26", "$10 AND $27", "$7 AND $28"]})
run_test(__LINE__, "ABS(C - O) < .05 * (H - L) AND H - L < .2 * (AVGH21 - AVGL21) AND ABS(C1 - O1) < .05 * (H1 - L1) AND H1 - L < .2 * (DAYS_AGO(1, AVGH21) - DAYS_AGO(1, AVGL21)) AND ABS(C2 - O2) < .05 * (H2 - L2) AND H2 - L2 < .2 * (DAYS_AGO(2, AVGH21) - DAYS_AGO(2, AVGL21)) AND L2 > H1 AND L2 > H;", {:rules=>["$9 AND $55"], :symbols=>["C", "O", "$0 - $1", "ABS $2", ".05", "H", "L", "$5 - $6", "$4 * $7", "$3 < $8", ".2", "21", "AVGH $11", "AVGL $11", "$12 - $13", "$10 * $14", "$7 < $15", "1", "C $17", "O $17", "$18 - $19", "ABS $20", "H $17", "L $17", "$22 - $23", "$4 * $24", "$21 < $25", "$22 - $6", "DAYS_AGO $17,$12", "DAYS_AGO $17,$13", "$28 - $29", "$10 * $30", "$27 < $31", "2", "C $33", "O $33", "$34 - $35", "ABS $36", "H $33", "L $33", "$38 - $39", "$4 * $40", "$37 < $41", "DAYS_AGO $33,$12", "DAYS_AGO $33,$13", "$43 - $44", "$10 * $45", "$40 < $46", "$39 > $22", "$39 > $5", "$48 AND $49", "$47 AND $50", "$42 AND $51", "$32 AND $52", "$26 AND $53", "$16 AND $54"]})
run_test(__LINE__, "C2>O2 AND (O1-C1)>=.7*(H1-L1) AND C1<O2 AND O1>C2 AND (H1-L1)>=1.2*(DAYS_AGO(1, AVGH10) - DAYS_AGO(1, AVGL10)) AND O<O1 AND O>C1 AND C<C1 AND (O-C)>=.7*(H-L);", {:rules=>["$3 AND $42"], :symbols=>["2", "C $0", "O $0", "$1 > $2", "1", "O $4", "C $4", "$5 - $6", ".7", "H $4", "L $4", "$9 - $10", "$8 * $11", "$7 >= $12", "$6 < $2", "$5 > $1", "1.2", "10", "AVGH $17", "DAYS_AGO $4,$18", "AVGL $17", "DAYS_AGO $4,$20", "$19 - $21", "$16 * $22", "$11 >= $23", "O", "$25 < $5", "$25 > $6", "C", "$28 < $6", "$25 - $28", "H", "L", "$31 - $32", "$8 * $33", "$30 >= $34", "$29 AND $35", "$27 AND $36", "$26 AND $37", "$24 AND $38", "$15 AND $39", "$14 AND $40", "$13 AND $41"]})
run_test(__LINE__, "ABS(O-C)<=.2*(H-L) AND ABS(O-C)>=.1*(H-L) AND (H-O)>=.5*(H-L) AND (H-C)>=.5*(H-L) AND (O-L)<=.05*(H-L) OR (C-L)<=.05*(H-L) AND (H-L)>=.8*(AVGH10-AVGL10) AND O>=(L1+.5*(H1-L1)) AND C>=(L1+.5*(H1-L1)) AND H=MAXH5 AND H>L;", {:rules=>["$9 AND $52"], :symbols=>["O", "C", "$0 - $1", "ABS $2", ".2", "H", "L", "$5 - $6", "$4 * $7", "$3 <= $8", ".1", "$10 * $7", "$3 >= $11", "$5 - $0", ".5", "$14 * $7", "$13 >= $15", "$5 - $1", "$17 >= $15", "$0 - $6", ".05", "$20 * $7", "$19 <= $21", "$1 - $6", "$23 <= $21", ".8", "10", "AVGH $26", "AVGL $26", "$27 - $28", "$25 * $29", "$7 >= $30", "1", "L $32", "H $32", "$34 - $33", "$14 * $35", "$33 + $36", "$0 >= $37", "$1 >= $37", "5", "MAXH $40", "$5 = $41", "$5 > $6", "$42 AND $43", "$39 AND $44", "$38 AND $45", "$31 AND $46", "$24 AND $47", "$22 OR $48", "$18 AND $49", "$16 AND $50", "$12 AND $51"]})
run_test(__LINE__, "ABS(C2-O2) > .5 * (H2 - L2) AND ABS(C1 - O1) > .5 * (H1 - L1) AND C2 < O2 AND C1 < O1 AND H1 < L2 AND L < H1 AND H > L2 AND C > O;", {:rules=>["$10 AND $36"], :symbols=>["2", "C $0", "O $0", "$1 - $2", "ABS $3", ".5", "H $0", "L $0", "$6 - $7", "$5 * $8", "$4 > $9", "1", "C $11", "O $11", "$12 - $13", "ABS $14", "H $11", "L $11", "$16 - $17", "$5 * $18", "$15 > $19", "$1 < $2", "$12 < $13", "$16 < $7", "L", "$24 < $16", "H", "$26 > $7", "C", "O", "$28 > $29", "$27 AND $30", "$25 AND $31", "$23 AND $32", "$22 AND $33", "$21 AND $34", "$20 AND $35"]})

#O and OBV ambiguity
run_test(__LINE__, "OBV > 0;", {:rules=>["$0 > $1"], :symbols=>["OBV", "0"]})
run_test(__LINE__, "OBV2 > 0;", {:rules=>["$1 > $2"], :symbols=>["2", "OBV $0", "0"]})
run_test(__LINE__, "OBV > O;", {:rules=>["$0 > $1"], :symbols=>["OBV", "O"]})
run_test(__LINE__, "OBV2 > O;", {:rules=>["$1 > $2"], :symbols=>["2", "OBV $0", "O"]})
run_test(__LINE__, "OBV2 > O2;", {:rules=>["$1 > $2"], :symbols=>["2", "OBV $0", "O $0"]})

#more bad threeopcode
run_test(__LINE__, "C(1,2,C) != C;", {:rules=>["$3 != $2"], :symbols=>["1", "2", "C", "C $0,$1,$2"]})
run_test(__LINE__, "C(0,1+1,2) > 3;", {:rules=>["$4 > $5"], :symbols=>["0", "1", "$1 + $1", "2", "C $0,$2,$3", "3"]})
run_test(__LINE__, "C({0 > 1 ? 2 : 3} + 4) > C1;", {:rules=>["$8 > $9"], :symbols=>["0", "1", "$0 > $1", "2", "3", "$2 $3 $4", "4", "$5 + $6", "C $7", "C $1"]})

#COMPOUND STATEMENTS
run_test(__LINE__, "C > 1; O > 2;", {:rules=>["$0 > $1", "$2 > $3"], :symbols=>["C", "1", "O", "2"]})
run_test(__LINE__, "C > 1; O > 2; H > 4; L > 5;", {:rules=>["$0 > $1", "$2 > $3", "$4 > $5", "$6 > $7"], :symbols=>["C", "1", "O", "2", "H", "4", "L", "5"]})
run_test(__LINE__, "O100 > 100; V > 30000000; C20 > 50;", {:rules=>["$1 > $0", "$2 > $3", "$5 > $6"], :symbols=>["100", "O $0", "V", "30000000", "20", "C $4", "50"]})
run_test(__LINE__, "O = 84.54; H = 84.85; L = 84.02; C = 84.08; V = 12957300; C5 > 100;", {:rules=>["$0 = $1", "$2 = $3", "$4 = $5", "$6 = $7", "$8 = $9", "$11 > $12"], :symbols=>["O", "84.54", "H", "84.85", "L", "84.02", "C", "84.08", "V", "12957300", "5", "C $10", "100"]})  

#run_test(__LINE__, "(C > C1) AND (C > AVGC50) AND (AVGC50 > AVGC200) AND (V > 1.5 * AVGV50) AND (AVGV50 >= 200) AND (C > 4);", {})
#{1 > 1 OR 2 > 2 ? 0 : 1} > 0;
#run_test(__LINE__, "{C > 1 OR C > 2 ? 0 : 1} > 1;", {})
#

#live screens
run_test(__LINE__, "(((C - MINC260) / MINC260) * 100) > 100;", {:rules=>["$6 > $5"], :symbols=>["C", "260", "MINC $1", "$0 - $2", "$3 / $2", "100", "$4 * $5"]})
run_test(__LINE__, "(((MAXC260 - C) / MAXC260) * 100) <= 25;", {:rules=>["$6 <= $7"], :symbols=>["260", "MAXC $0", "C", "$1 - $2", "$3 / $1", "100", "$4 * $5", "25"]})
run_test(__LINE__, "C20 >= 5 AND (AVGC20 * AVGV20) >= 250000 AND 100 * (C - C20) / C20 >= 50;", {:rules=>["$3 AND $16"], :symbols=>["20", "C $0", "5", "$1 >= $2", "AVGC $0", "AVGV $0", "$4 * $5", "250000", "$6 >= $7", "100", "C", "$10 - $1", "$11 / $1", "$9 * $12", "50", "$13 >= $14", "$8 AND $15"]})
